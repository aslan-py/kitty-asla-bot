"""
–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
"""
import datetime
import time
import os
import log
import logging

from datetime import timedelta
from dotenv import load_dotenv
from telebot import TeleBot, types

from database import base_insert
from database_handler import (get_expenses_statistics, get_total_statistics,
                              format_statistics_message, check_user_exists)
from config import TIME_TO_CLEAR
from cat_api import get_cat_img

logging.getLogger("telebot").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

load_dotenv()

secret_token = os.getenv('TOKEN')
bot = TeleBot(token=secret_token)

bot.set_my_commands([
    types.BotCommand("/start", "üêÜ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
    types.BotCommand("/help", "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
    types.BotCommand("/stats", "üí∏ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç"),
    types.BotCommand("/cat", "üê±‚ÄçüöÄ –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ç–∏–∫–∞"),
])


user_status = {}
for_user_stats = {}


@bot.message_handler(commands=['cat'])
def cat(message):
    new_cat = get_cat_img()
    if new_cat:
        bot.send_photo(message.chat.id, new_cat)
    else:
        bot.send_message(
            message.chat.id, 'üòæ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ , —è –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞')


@bot.message_handler(commands=['start'])
def handle_start(message):

    user_status[message.chat.id] = {
        'login': message.chat.username,
        'active': True,
        'time': time.time()
    }

    bot.send_message(
        chat_id=message.chat.id,
        text=f'‚úÖ –ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É '
            f'—Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–≤–æ–∏ —Ç—Ä–∞—Ç—ã.\n\n'
            f'–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
            f'<code>–ø—Ä–æ–¥—É–∫—Ç —Å—É–º–º–∞</code>\n\n'
            f'–ü—Ä–∏–º–µ—Ä: <code>–º—è—Å–æ 1500</code>\n\n'
            f'üìã *–ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é:*\n'
            f'‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É "Ô∏ô" —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞\n'
            f'‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /help, /stats',
        parse_mode='HTML',
        reply_markup=types.ReplyKeyboardRemove()

    )
    logging.debug('–°–æ–æ–±—â–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ handle_start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')


@bot.message_handler(commands=['help'])
def handle_help(message):
    text = '''
   üëã *–ü—Ä–∏–≤–µ—Ç, —è kitty_asla_bot!*

üê± *–ú–æ—è –∑–∞–¥–∞—á–∞* - –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ç–≤–æ–∏—Ö –∑–∞—Ç—Ä–∞—Ç.

üìã *–ê–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π:*

1Ô∏è‚É£ –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É */start* —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å
2Ô∏è‚É£ –ù–∞–ø–∏—à–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:
   *[—á—Ç–æ –∫—É–ø–∏–ª] [—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª]*

üçñ *–ü—Ä–∏–º–µ—Ä:*
   `–º—è—Å–æ 1500`
   `–∫–∞—Ñ–µ 1200`
   `—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç 500`

üí° *–°–æ–≤–µ—Ç:* –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–≤–æ–∏—Ö —Ç—Ä–∞—Ç!

üìä *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/cat - –ø—Ä–æ—Å—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∫–æ—Ç–∏–∫–∞
'''

    bot.send_message(
        chat_id=message.chat.id,
        text=text,
        parse_mode='Markdown'
    )
    logging.debug('–°–æ–æ–±—â–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ handle_help –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')


def create_stats_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üìÖ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="stats_custom"),
        types.InlineKeyboardButton("üìÜ –ù–µ–¥–µ–ª—è", callback_data="stats_week"),
        types.InlineKeyboardButton("üìä –ú–µ—Å—è—Ü", callback_data="stats_month"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="stats_cancel")
    ]
    keyboard.add(buttons[0])
    keyboard.add(buttons[1], buttons[2])
    keyboard.add(buttons[3])
    return keyboard


@bot.message_handler(commands=['stats'])
def handle_stats(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    chat_id = message.chat.id
    username = message.chat.username
    logging.debug('–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')

    remove_keyboard = types.ReplyKeyboardRemove()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if not check_user_exists(username):
        bot.send_message(
            chat_id,
            "‚ùå –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ç—Ä–∞—Ç—ã!\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start",
            reply_markup=remove_keyboard
        )
        return

    for_user_stats[chat_id] = {
        'username': username,
        'state': 'stats_menu'
    }
    bot.send_message(
        chat_id,
        "üìä *–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:*",
        parse_mode='Markdown',
        reply_markup=create_stats_keyboard()
    )
    logging.debug('–ü–æ–∫–∞–∑–∞–ª–∏ –≤ –¢–ì –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞')


@bot.callback_query_handler(func=lambda call: call.data.startswith('stats_'))
def handle_stats_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    username = call.message.chat.username

    if call.data == 'stats_custom':
        bot.edit_message_text(
            "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì`\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `01.01.2024-31.01.2024`",
            chat_id,
            message_id,
            parse_mode='Markdown'
        )
        for_user_stats[chat_id] = {
            'username': username,
            'state': 'waiting_dates'
        }
        logging.debug('–í—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞')

    elif call.data == 'stats_week':
        end_date = datetime.date.today()
        start_date = end_date - timedelta(days=7)
        period_data = {
            'username': username,
            'start_date': start_date.strftime('%d.%m.%Y'),
            'end_date': end_date.strftime('%d.%m.%Y'),
            'period_type': 'week'
        }
        bot.edit_message_text(
            f'üìÜ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:*\n'
            f'–° {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}',
            chat_id,
            message_id,
            parse_mode='Markdown'
        )
        logging.debug('–í—ã–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é')
        process_statistics(chat_id, period_data)

    elif call.data == 'stats_month':
        today = datetime.date.today()
        start_date = today.replace(day=1)
        if today.month == 12:
            end_date = (today.replace(year=today.year + 1,
                                      month=1, day=1) - timedelta(days=1))
        else:
            end_date = (today.replace(month=today.month + 1, day=1) -
                        timedelta(days=1))
        period_data = {
            'username': username,
            'start_date': start_date.strftime('%d.%m.%Y'),
            'end_date': end_date.strftime('%d.%m.%Y'),
            'period_type': 'month'
        }
        bot.edit_message_text(
            f'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:*\n'
            f'–° {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}',
            chat_id,
            message_id,
            parse_mode='Markdown'
        )
        logging.debug('–í—ã–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü')
        process_statistics(chat_id, period_data)

    elif call.data == 'stats_back':
        bot.edit_message_text(
            'üìä *–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:*',
            chat_id,
            message_id,
            parse_mode='Markdown',
            reply_markup=create_stats_keyboard()
        )
        for_user_stats[chat_id]['state'] = 'stats_menu'
        logging.debug('–í–æ–∑–≤—Ä–∞—Ç –≤–Ω—É—Ç—Ä–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')

    elif call.data == 'stats_cancel':
        bot.delete_message(chat_id, message_id)
        if chat_id in for_user_stats:
            del for_user_stats[chat_id]
        logging.debug('–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')


@bot.message_handler(
        func=lambda message:
        for_user_stats.get(message.chat.id, {}).get('state') == 'waiting_dates'
)
def handle_custom_dates(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    chat_id = message.chat.id
    text = message.text.strip()
    username = message.chat.username
    try:
        if '-' in text and text.count('.') == 4:
            start_str, end_str = text.split('-')
            start_date = datetime.datetime.strptime(start_str, '%d.%m.%Y').date()
            end_date = datetime.datetime.strptime(end_str, '%d.%m.%Y').date()
            if start_date > end_date:
                bot.send_message(
                    chat_id, "‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è!")
                return
            period_data = {
                'username': for_user_stats[chat_id]['username'],
                'start_date': start_date.strftime('%d.%m.%Y'),
                'end_date': end_date.strftime('%d.%m.%Y'),
                'period_type': 'custom'
            }
            bot.send_message(
                chat_id,
                f'üìÖ *–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥:*\n'
                f'–° {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}',
                parse_mode='Markdown'
            )
            process_statistics(chat_id, period_data)
            if chat_id in for_user_stats:
                del for_user_stats[chat_id]
        else:
            bot.send_message(
                chat_id,
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: `01.01.2024-31.01.2024`',
                parse_mode='Markdown'
            )
    except ValueError:
        bot.send_message(chat_id, '‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.')
        logging.error('–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã!')


def process_statistics(chat_id, period_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        if not check_user_exists(period_data['username']):
            bot.send_message(
                chat_id,
                '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n'
                '–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ç—Ä–∞—Ç—ã.'
            )
            return

        statistics = get_expenses_statistics(period_data)
        total_stats = get_total_statistics(period_data)
        message = format_statistics_message(period_data, statistics, total_stats)
        bot.send_message(chat_id, message, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id

    if message.text in ['/help', '/stats', '/start']:
        return
    if chat_id not in user_status or not user_status[chat_id]['active']:
        bot.send_message(
            chat_id=chat_id,
            text='‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n–ò–ª–∏ /help –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏'
        )
        logging.debug(
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –æ—Ç–∫–∞–∑ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —à—Ç–∞—Ç–Ω–æ')
        return

    if (user_status[chat_id]['active'] and
        time.time() - user_status[chat_id]['time'] > TIME_TO_CLEAR):
        del user_status[chat_id]
        bot.send_message(
            chat_id=chat_id, text='ü¶ò–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã–ª–∞—Å—å, –Ω–∞–∂–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ /start')
        logging.debug('–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å')
        return

    if user_status[chat_id]['active']:
        user_data = {
            'login': message.chat.username,
            'staf': message.text,
        }
    try:
        base_insert(user_data)
        bot.send_message(chat_id=chat_id, text='‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é –≤ –±–∞–∑—É!')
        logging.debug(f'–î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã - —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–ì {user_data}')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É {e}')
        bot.send_message(
            chat_id=chat_id,
            text='üíÄ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —è –Ω–µ —Å–º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑'
        )


if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    bot.polling(
        none_stop=True,
        timeout=10,
        interval=2
    )
