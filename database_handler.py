import sqlite3
from datetime import datetime
from typing import List, Tuple
import logging

from config import DATABASE_NAME

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def check_user_exists(username: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ.
    """
    try:
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()

        query = "SELECT id, name FROM logins WHERE name = ?"
        cursor.execute(query, (username,))
        result = cursor.fetchone()
        conn.close()

        if result:
            logger.info(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ (ID: {result[0]})')
            return True
        else:
            logger.warning(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ')
            return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        return False


def get_expenses_statistics(period_data: dict) -> List[Tuple]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    """
    try:
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        # –¥–∞—Ç—ã —Å–Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç SQL
        start_date = (datetime.strptime(period_data['start_date'],
                                        '%d.%m.%Y').strftime('%Y-%m-%d'))
        end_date = (datetime.strptime(period_data['end_date'],
                                      '%d.%m.%Y').strftime('%Y-%m-%d'))

        logger.info(f'  –ü–û–ò–°–ö –°–¢–ê–¢–ò–°–¢–ò–ö–ò:')
        logger.info(f'   Username: {period_data['username']}')
        logger.info(f'   –ü–µ—Ä–∏–æ–¥: {start_date} –¥–æ {end_date}')

        # –¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ JOIN
        test_query1 = "SELECT * FROM products WHERE created_at BETWEEN ? AND ?"
        cursor.execute(
            test_query1, (f'{start_date} 00:00:00', f'{end_date} 23:59:59'))
        test_results1 = cursor.fetchall()
        logger.info(
            f'   –¢–ï–°–¢ 1 - –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ: {len(test_results1)} –∑–∞–ø–∏—Å–µ–π')

        # –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –ø–æ username –±–µ–∑ –¥–∞—Ç—ã
        test_query2 = """
        SELECT p.* FROM products p
        JOIN logins l ON p.login_id = l.id
        WHERE l.name = ?
        """
        cursor.execute(test_query2, (period_data['username'],))
        test_results2 = cursor.fetchall()
        logger.info(
            f'   –¢–ï–°–¢ 2 - –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {len(test_results2)} –∑–∞–ø–∏—Å–µ–π')

        # –¢–ï–°–¢ 3: –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        query = """
        SELECT
            c.name as category,
            SUM(p.price) as total_amount,
            COUNT(p.id) as transactions_count
        FROM products p
        JOIN logins l ON p.login_id = l.id
        JOIN categories c ON p.category_id = c.id
        WHERE l.name = ?
        AND date(p.created_at) BETWEEN ? AND ?
        GROUP BY c.name
        ORDER BY total_amount DESC
        """

        cursor.execute(query, (period_data['username'], start_date, end_date))
        results = cursor.fetchall()

        logger.info(f' –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê: {len(results)}')

        conn.close()
        return results

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_expenses_statistics: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return []


def get_total_statistics(period_data: dict) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥.
    """
    try:
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()

        start_date = (datetime.strptime(period_data['start_date'],
                                        '%d.%m.%Y').strftime('%Y-%m-%d'))
        end_date = (datetime.strptime(period_data['end_date'],
                                      '%d.%m.%Y').strftime('%Y-%m-%d'))

        query = """
        SELECT
            SUM(p.price) as total_amount,
            COUNT(p.id) as transactions_count,
            AVG(p.price) as average_transaction,
            (SELECT c.name FROM products p2
             JOIN categories c ON p2.category_id = c.id
             JOIN logins l ON p2.login_id = l.id
             WHERE l.name = ? AND date(p2.created_at) BETWEEN ? AND ?
             GROUP BY c.name ORDER BY SUM(p2.price) DESC LIMIT 1) as top_category
        FROM products p
        JOIN logins l ON p.login_id = l.id
        WHERE l.name = ?
        AND date(p.created_at) BETWEEN ? AND ?
        """

        cursor.execute(query, (
            period_data['username'], start_date, end_date,
            period_data['username'], start_date, end_date
        ))

        result = cursor.fetchone()
        conn.close()

        if result and result[0] is not None:
            return {
                'total_amount': result[0] or 0,
                'top_category': result[3] or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
            }
        else:
            return {
                'total_amount': 0,
                'top_category': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
            }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}


def format_statistics_message(
        period_data: dict, statistics: List[Tuple], total_stats: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram.
    """
    if not statistics or total_stats.get('total_amount', 0) == 0:
        return 'üìä –ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'

    message = f'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:*\n'
    message += f'–° {period_data['start_date']} –ø–æ {period_data['end_date']}\n\n'

    message += f'üíµ *–û–±—â–∞—è —Å—É–º–º–∞:* {total_stats['total_amount']} —Ä—É–±.\n'
    message += f'üèÜ *–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è:* {total_stats['top_category']}\n\n'

    message += '*üìã –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n'

    for i, (category, amount, count) in enumerate(statistics, 1):
        if total_stats['total_amount'] > 0:
            percentage = (amount / total_stats['total_amount'] * 100)
        else:
            percentage = 0
        message += f'{i}. {category}: {amount} —Ä—É–±. ({count} —à—Ç.) - {percentage:.1f}%\n'

    return message
